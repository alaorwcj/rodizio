#!/usr/bin/env python3
"""
Script para corrigir campo senha_hash -> password_hash nos usuÃ¡rios
"""
import json
from datetime import datetime

def fix_password_fields():
    # Carregar banco de dados
    with open('data/db.json', 'r', encoding='utf-8') as f:
        db = json.load(f)
    
    # Criar backup antes
    backup_file = f'data/db_backup_fix_password_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
    with open(backup_file, 'w', encoding='utf-8') as f:
        json.dump(db, f, indent=2, ensure_ascii=False)
    print(f"âœ… Backup criado: {backup_file}")
    
    # Corrigir usuÃ¡rios
    if 'usuarios' in db:
        usuarios_corrigidos = 0
        for user_id, usuario in db['usuarios'].items():
            # Se tem senha_hash mas nÃ£o tem password_hash
            if 'senha_hash' in usuario and 'password_hash' not in usuario:
                usuario['password_hash'] = usuario['senha_hash']
                del usuario['senha_hash']
                usuarios_corrigidos += 1
                print(f"  ðŸ”§ Corrigido usuÃ¡rio: {user_id}")
            
            # Adicionar campo 'id' se nÃ£o existir
            if 'id' not in usuario:
                usuario['id'] = user_id
                print(f"  âž• Adicionado campo 'id' para: {user_id}")
        
        print(f"\nâœ… Total de usuÃ¡rios corrigidos: {usuarios_corrigidos}")
    
    # Salvar banco corrigido
    with open('data/db.json', 'w', encoding='utf-8') as f:
        json.dump(db, f, indent=2, ensure_ascii=False)
    
    print(f"âœ… Banco de dados atualizado com sucesso!")
    print(f"\nðŸ“‹ UsuÃ¡rios no sistema:")
    for user_id, usuario in db.get('usuarios', {}).items():
        print(f"  - {user_id} ({usuario['nome']}) - Tipo: {usuario['tipo']}")

if __name__ == '__main__':
    print("ðŸ”§ Corrigindo campos de senha nos usuÃ¡rios...\n")
    fix_password_fields()
    print("\nâœ… Processo concluÃ­do!")
